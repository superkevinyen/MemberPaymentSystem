{"types":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  // Allows to automatically instantiate createClient with right options\n  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)\n  __InternalSupabase: {\n    PostgrestVersion: \"13.0.5\"\n  }\n  public: {\n    Tables: {\n      [_ in never]: never\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      adjust_member_balance: {\n        Args: {\n          adjustment_amount: number\n          adjustment_type: string\n          member_uuid: string\n          reason?: string\n        }\n        Returns: {\n          error_message: string\n          new_balance: number\n          success: boolean\n          transaction_id: string\n        }[]\n      }\n      admin_update_user_metadata: {\n        Args: { p_metadata: Json; p_user_id: string }\n        Returns: boolean\n      }\n      calculate_member_discount: {\n        Args: { member_uuid: string }\n        Returns: {\n          discount_rate: number\n          discount_source: string\n        }[]\n      }\n      cleanup_expired_qr_codes: {\n        Args: Record<PropertyKey, never>\n        Returns: number\n      }\n      cleanup_expired_sessions: {\n        Args: Record<PropertyKey, never>\n        Returns: number\n      }\n      cleanup_test_data: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          deleted_companies: number\n          deleted_members: number\n          deleted_transactions: number\n          reset_refunds: number\n        }[]\n      }\n      company_bind_member: {\n        Args: { company_uuid: string; member_uuid: string }\n        Returns: {\n          message: string\n          success: boolean\n        }[]\n      }\n      company_unbind_member: {\n        Args: { company_uuid: string; member_uuid: string }\n        Returns: {\n          message: string\n          success: boolean\n        }[]\n      }\n      consume_member_balance: {\n        Args: {\n          consume_amount: number\n          description?: string\n          member_uuid: string\n        }\n        Returns: {\n          actual_amount: number\n          discount_amount: number\n          error_message: string\n          new_balance: number\n          success: boolean\n          transaction_id: string\n        }[]\n      }\n      create_company_with_password: {\n        Args: {\n          company_name: string\n          company_status?: string\n          contact_email?: string\n          contact_phone?: string\n          discount_rate?: number\n          plain_password?: string\n        }\n        Returns: {\n          company_code: string\n          company_id: string\n          error_message: string\n          success: boolean\n        }[]\n      }\n      create_member_session: {\n        Args: { login_type_input: string; member_uuid: string }\n        Returns: {\n          expires_at: string\n          session_token: string\n        }[]\n      }\n      create_member_with_password: {\n        Args: {\n          discount_rate?: number\n          initial_balance?: number\n          member_email?: string\n          member_name: string\n          member_phone?: string\n          member_status?: string\n          plain_password?: string\n        }\n        Returns: {\n          error_message: string\n          member_code: string\n          member_id: string\n          success: boolean\n        }[]\n      }\n      freeze_member_balance: {\n        Args: { freeze_amount: number; member_uuid: string; reason?: string }\n        Returns: {\n          available_balance: number\n          error_message: string\n          new_frozen_amount: number\n          success: boolean\n        }[]\n      }\n      generate_card_transaction_no: {\n        Args: { transaction_type: string }\n        Returns: string\n      }\n      generate_dynamic_qr_code: {\n        Args: { card_uuid: string }\n        Returns: string\n      }\n      generate_member_transaction_no: {\n        Args: { transaction_type: string }\n        Returns: string\n      }\n      generate_next_card_code: {\n        Args: Record<PropertyKey, never>\n        Returns: string\n      }\n      generate_next_company_code: {\n        Args: Record<PropertyKey, never>\n        Returns: string\n      }\n      generate_next_member_code: {\n        Args: Record<PropertyKey, never>\n        Returns: string\n      }\n      generate_transaction_no: {\n        Args: { transaction_type: string }\n        Returns: string\n      }\n      generate_unique_qr_code: {\n        Args: Record<PropertyKey, never>\n        Returns: string\n      }\n      get_all_enterprises_for_admin: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          balance: number\n          card_id: string\n          card_no: string\n          card_status: Database[\"public\"][\"Enums\"][\"card_status\"]\n          company_name: string\n          created_at: string\n          fixed_discount: number\n          id: string\n        }[]\n      }\n      get_all_users_for_admin: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          created_at: string\n          email: string\n          id: string\n          is_admin: boolean\n          name: string\n        }[]\n      }\n      get_member_refund_history: {\n        Args: {\n          limit_count?: number\n          member_uuid: string\n          offset_count?: number\n        }\n        Returns: {\n          original_amount: number\n          original_date: string\n          original_transaction_no: string\n          refund_amount: number\n          refund_date: string\n          refund_reason: string\n          refund_transaction_id: string\n          refund_transaction_no: string\n        }[]\n      }\n      get_qr_code_stats: {\n        Args: { end_date?: string; start_date?: string }\n        Returns: {\n          expired_validations: number\n          failed_validations: number\n          successful_validations: number\n          total_generated: number\n          total_validated: number\n        }[]\n      }\n      get_user_cards: {\n        Args: Record<PropertyKey, never>\n        Returns: unknown[]\n      }\n      get_user_role: {\n        Args: { p_user_id: string }\n        Returns: string[]\n      }\n      is_admin: {\n        Args: Record<PropertyKey, never>\n        Returns: boolean\n      }\n      is_platform_admin: {\n        Args: { p_user_id: string }\n        Returns: boolean\n      }\n      log_qr_code_usage: {\n        Args: {\n          action_input: string\n          error_msg?: string\n          ip_addr?: string\n          member_uuid: string\n          qr_code_input: string\n          result_input?: string\n          user_agent_input?: string\n        }\n        Returns: undefined\n      }\n      process_refund: {\n        Args: {\n          original_transaction_no: string\n          refund_amount: number\n          refund_reason?: string\n        }\n        Returns: {\n          error_message: string\n          new_balance: number\n          refund_transaction_id: string\n          refundable_remaining: number\n          success: boolean\n        }[]\n      }\n      recharge_member_balance: {\n        Args: {\n          description?: string\n          member_uuid: string\n          payment_method?: string\n          recharge_amount: number\n        }\n        Returns: {\n          error_message: string\n          new_balance: number\n          success: boolean\n          transaction_id: string\n        }[]\n      }\n      refresh_card_qr_code: {\n        Args: { card_uuid: string }\n        Returns: string\n      }\n      refresh_member_qr_code: {\n        Args: { member_uuid: string }\n        Returns: string\n      }\n      reset_all_test_refund_status: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          message: string\n          reset_count: number\n        }[]\n      }\n      reset_transaction_refund_status: {\n        Args: { transaction_no_input: string }\n        Returns: {\n          message: string\n          success: boolean\n        }[]\n      }\n      reset_weekly_password_verification: {\n        Args: Record<PropertyKey, never>\n        Returns: number\n      }\n      set_card_password: {\n        Args: { card_uuid: string; new_password: string }\n        Returns: boolean\n      }\n      set_company_password: {\n        Args: { company_uuid: string; new_password: string }\n        Returns: {\n          error_message: string\n          success: boolean\n        }[]\n      }\n      set_member_password: {\n        Args: { member_uuid: string; new_password: string }\n        Returns: {\n          error_message: string\n          success: boolean\n        }[]\n      }\n      unfreeze_member_balance: {\n        Args: { member_uuid: string; reason?: string; unfreeze_amount: number }\n        Returns: {\n          available_balance: number\n          error_message: string\n          new_frozen_amount: number\n          success: boolean\n        }[]\n      }\n      update_company_info: {\n        Args: {\n          company_uuid: string\n          new_discount_rate?: number\n          new_email?: string\n          new_name?: string\n          new_phone?: string\n        }\n        Returns: {\n          error_message: string\n          success: boolean\n        }[]\n      }\n      update_member_info: {\n        Args: {\n          member_uuid: string\n          new_discount_rate?: number\n          new_email?: string\n          new_name?: string\n          new_phone?: string\n        }\n        Returns: {\n          error_message: string\n          success: boolean\n        }[]\n      }\n      validate_member_session: {\n        Args: { session_token_input: string }\n        Returns: {\n          error_message: string\n          is_valid: boolean\n          login_type: string\n          member_id: string\n          needs_password_reauth: boolean\n        }[]\n      }\n      validate_qr_code: {\n        Args: { qr_code_input: string }\n        Returns: {\n          error_message: string\n          expires_at: string\n          is_valid: boolean\n          member_code: string\n          member_id: string\n        }[]\n      }\n      validate_refund_eligibility: {\n        Args: { original_transaction_no: string }\n        Returns: {\n          error_message: string\n          is_eligible: boolean\n          original_amount: number\n          refundable_amount: number\n          refunded_amount: number\n          transaction_date: string\n        }[]\n      }\n      verify_card_password: {\n        Args: { card_code_input: string; password_input: string }\n        Returns: {\n          card_code: string\n          card_id: string\n          error_message: string\n          is_valid: boolean\n        }[]\n      }\n      verify_company_password: {\n        Args: { company_code_input: string; password_input: string }\n        Returns: {\n          company_id: string\n          company_name: string\n          error_message: string\n          is_valid: boolean\n        }[]\n      }\n      verify_member_password: {\n        Args: { member_code_input: string; password_input: string }\n        Returns: {\n          error_message: string\n          is_valid: boolean\n          member_code: string\n          member_id: string\n        }[]\n      }\n    }\n    Enums: {\n      audit_action:\n        | \"create\"\n        | \"update\"\n        | \"delete\"\n        | \"login\"\n        | \"logout\"\n        | \"view\"\n        | \"export\"\n        | \"import\"\n        | \"approve\"\n        | \"reject\"\n        | \"cancel\"\n        | \"refund\"\n        | \"recharge\"\n        | \"payment\"\n        | \"other\"\n      card_status: \"active\" | \"inactive\" | \"suspended\" | \"expired\" | \"deleted\"\n      card_type: \"member\" | \"enterprise\"\n      change_type: \"earned\" | \"used\" | \"expired\" | \"manual_adjust\"\n      compensation_status:\n        | \"pending\"\n        | \"processing\"\n        | \"completed\"\n        | \"failed\"\n        | \"cancelled\"\n      compensation_type: \"retry\" | \"rollback\" | \"manual\" | \"auto_compensate\"\n      lock_type: \"balance\" | \"transaction\" | \"binding\" | \"qr_verification\"\n      member_status: \"active\" | \"inactive\" | \"suspended\" | \"deleted\"\n      payment_method:\n        | \"balance\"\n        | \"wechat\"\n        | \"alipay\"\n        | \"cash\"\n        | \"card\"\n        | \"other\"\n      reconciliation_status:\n        | \"pending\"\n        | \"matched\"\n        | \"mismatched\"\n        | \"manual_review\"\n        | \"completed\"\n      refund_method: \"original\" | \"balance\" | \"cash\" | \"bank_transfer\"\n      request_status:\n        | \"pending\"\n        | \"approved\"\n        | \"rejected\"\n        | \"completed\"\n        | \"cancelled\"\n      transaction_status:\n        | \"pending\"\n        | \"processing\"\n        | \"completed\"\n        | \"failed\"\n        | \"cancelled\"\n        | \"refunded\"\n      transaction_type:\n        | \"payment\"\n        | \"refund\"\n        | \"recharge\"\n        | \"transfer\"\n        | \"adjustment\"\n      verification_type: \"payment\" | \"binding\" | \"login\" | \"verification\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DatabaseWithoutInternals = Omit<Database, \"__InternalSupabase\">\n\ntype DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  public: {\n    Enums: {\n      audit_action: [\n        \"create\",\n        \"update\",\n        \"delete\",\n        \"login\",\n        \"logout\",\n        \"view\",\n        \"export\",\n        \"import\",\n        \"approve\",\n        \"reject\",\n        \"cancel\",\n        \"refund\",\n        \"recharge\",\n        \"payment\",\n        \"other\",\n      ],\n      card_status: [\"active\", \"inactive\", \"suspended\", \"expired\", \"deleted\"],\n      card_type: [\"member\", \"enterprise\"],\n      change_type: [\"earned\", \"used\", \"expired\", \"manual_adjust\"],\n      compensation_status: [\n        \"pending\",\n        \"processing\",\n        \"completed\",\n        \"failed\",\n        \"cancelled\",\n      ],\n      compensation_type: [\"retry\", \"rollback\", \"manual\", \"auto_compensate\"],\n      lock_type: [\"balance\", \"transaction\", \"binding\", \"qr_verification\"],\n      member_status: [\"active\", \"inactive\", \"suspended\", \"deleted\"],\n      payment_method: [\"balance\", \"wechat\", \"alipay\", \"cash\", \"card\", \"other\"],\n      reconciliation_status: [\n        \"pending\",\n        \"matched\",\n        \"mismatched\",\n        \"manual_review\",\n        \"completed\",\n      ],\n      refund_method: [\"original\", \"balance\", \"cash\", \"bank_transfer\"],\n      request_status: [\n        \"pending\",\n        \"approved\",\n        \"rejected\",\n        \"completed\",\n        \"cancelled\",\n      ],\n      transaction_status: [\n        \"pending\",\n        \"processing\",\n        \"completed\",\n        \"failed\",\n        \"cancelled\",\n        \"refunded\",\n      ],\n      transaction_type: [\n        \"payment\",\n        \"refund\",\n        \"recharge\",\n        \"transfer\",\n        \"adjustment\",\n      ],\n      verification_type: [\"payment\", \"binding\", \"login\", \"verification\"],\n    },\n  },\n} as const\n"}